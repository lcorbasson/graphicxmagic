% #!rm -f tigerpsdfmt4* && ptex2pdf -l -u -ot '-shell-escape' -od '-v' test-gin-rule-psd
% #!rm -f tigerpsdfmt4* && xelatex -shell-escape test-gin-rule-psd
% #!rm -f tigerpsdfmt4* && pdflatex -shell-escape test-gin-rule-psd
%#!rm -f tigerpsdfmt4* && lualatex -shell-escape test-gin-rule-psd
% #!lualatex -shell-escape test-gin-rule-psd
%%
%% This is file 'graphicxwand.sty'.
%%
%% Based on 'graphicxpsd.sty' v1.2:
%%     https://github.com/munepi/graphicxpsd
%%     Copyright (c) 2017-2023 Munehiro Yamamoto
%%         * e-mail:   munepixyz@gmail.com, munepi@greencherry.jp
%%         * GitHub:   https://github.com/munepi
%%         * Twitter:  @munepixyz
%%
%% Copyright (c) 2025 Loïc CORBASSON <loic.devel@corbasson.fr>
%%
%% This package is licensed under the terms of the MIT License.
%%
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{graphicxwand}
  [2025/07/29 v1.4  Support for (almost) any image format for the graphicx
                    package via various converters
                    (img2pdf, convert, magick, gm, sips)]

%% declare package errors
\def\gfxwand@error{\PackageError{graphicxwand}}
\def\gfxwand@warning{\PackageWarning{graphicxwand}}
\def\gfxwand@warningnoline{\PackageWarningNoLine{graphicxwand}}
\def\gfxwand@info{\PackageInfo{graphicxwand}}

%% support keyval options and allow string manipulations
\RequirePackage{kvoptions}
\SetupKeyvalOptions{
  family=gfxwand,
  prefix=gfxwand@,
}
\RequirePackage{xstring}
\newcommand\IfStringInList[2]{\IfSubStr*{,#2,}{,#1,}}

%% support major graphicx drivers
\RequirePackage{iftex}
\newif\if@gfxwand@needsxbb \@gfxwand@needsxbbfalse
\newif\if@gfxwand@likepdftex \@gfxwand@likepdftexfalse
\ifpdf
  \DeclareStringOption[likepdftex]{driver}
  \@gfxwand@needsxbbfalse\@gfxwand@likepdftextrue%
\else
  \DeclareStringOption{driver}
\fi
% alternative interface for driver options
\DeclareVoidOption{dvips}{\gfxwand@SetupDriver}
%\DeclareVoidOption{dvipdfm}{\SetupDriver}
\DeclareVoidOption{dvipdfmx}{\gfxwand@SetupDriver}
\DeclareVoidOption{pdftex}{\gfxwand@SetupDriver}
\DeclareVoidOption{luatex}{\gfxwand@SetupDriver}
\DeclareVoidOption{xetex}{\gfxwand@SetupDriver}
% In \gfxwand@SetupDriver we take the current option \CurrentOption
% and pass it to the driver option.
% The \expandafter commands expand \CurrentOption at the
% time, when \gfxwand@SetupDriver is executed and \CurrentOption
% has the correct meaning.
\newcommand*{\gfxwand@SetupDriver}{%
  \expandafter\gfxwand@@SetupDriver\expandafter{\CurrentOption}%
}
\newcommand*{\gfxwand@@SetupDriver}[1]{%
  \IfStringInList{#1}{dvipdfmx,xetex}{
    \@gfxwand@needsxbbtrue\@gfxwand@likepdftexfalse
  }{\IfStringInList{#1}{luatex,pdftex}{
    \@gfxwand@needsxbbfalse\@gfxwand@likepdftextrue
  }{
    \gfxwand@error{Unknown option ‘#1’}{}%
  }}
  \setkeys{gfxwand}{driver={#1}}%
}

%% converters
\DeclareStringOption[magick]{converter}[magick]
%% support for image-to-pdf commands:
%% TODO update documentation
%% - img2pdf (uses Pillow),
%% - imagemagick/magick/convert (ImageMagick),
%% - graphicsmagick (GraphicsMagick),
%% - sips (macOS)
\newif\if@gfxwand@imgtopdf \@gfxwand@imgtopdffalse
\newif\if@gfxwand@magick \@gfxwand@magickfalse
%\newif\if@gfxwand@vips \@gfxwand@vipsfalse
\newif\if@gfxwand@sips \@gfxwand@sipsfalse
\def\@gfxwand@converter{convert}%% as default
\newcommand*{\gfxwand@SetupConverter}{%
  \IfStringInList{\gfxwand@converter}{img2pdf}{
    \@gfxwand@imgtopdftrue\gdef\@gfxwand@converter{img2pdf}
  }{\IfStringInList{\gfxwand@converter}{im,imagemagick,magick}{
    \@gfxwand@magicktrue\gdef\@gfxwand@converter{magick}
  }{\IfStringInList{\gfxwand@converter}{gm,graphicsmagick,gmconvert}{
    \@gfxwand@magicktrue\gdef\@gfxwand@converter{gm\GPT@space convert}
  }{\IfStringInList{\gfxwand@converter}{convert}{
    \@gfxwand@magicktrue\gdef\@gfxwand@converter{convert}
  }{\IfStringInList{\gfxwand@converter}{sips}{
    \@gfxwand@sipstrue\gdef\@gfxwand@converter{sips}
  }{
    \gfxwand@error{Unknown option value ‘\gfxwand@converter’^^J
      for ‘converter’}{}%
  }}}}}
}

%% lossless mode
\DeclareBoolOption[true]{lossless} % TODO add a lossy mode for lossless=false
%% image cache flag
\DeclareBoolOption[true]{imagecache}
%% use only local files, in the document's directory
\DeclareBoolOption[true]{localfiles}

%% set options defaults and process options
\DeclareDefaultOption{\gfxwand@warning{`\CurrentOption' ignored}}% For unknown options
\ProcessKeyvalOptions*{}
\gfxwand@SetupConverter

%% support for * (any) extension (imagetopdf)
%% TODO: see why we don't use \DeclareGraphicsRule
%% TODO: add an option to use JP2/JPG (lossy) conversion instead of PDF/PNG
\if@gfxwand@needsxbb
  % When including images with dvipdfmx, their bounding boxes should be generated by running extractbb.
  % The  result will be in an .xbb file; the xbb information is the same as for the PDF format.
  \@namedef{Gin@rule@*}#1{{imagetopdf}{.xbb}{#1}}
\else\if@gfxwand@likepdftex
  \@namedef{Gin@rule@*}#1{{imagetopdf}{.pdf}{#1}}
\else
  \gfxwand@error{Please choose a specific dviware driver from the following list
    and set it as a documentclass option.^^J
    Available dviware drivers: dvipdfmx, xetex, luatex, pdftex}{}%
\fi\fi

%% then, include the file as converted PDF
\@ifundefined{Ginclude@pdf}{\gfxwand@error{%
  Please load 'graphicxwand' package after loading 'graphicx' package.}}\relax
\let\Ginclude@imagetopdf\Ginclude@pdf

%% compatibility for TL16 or lower version
\@ifundefined{GPT@space}{%
  \def\GPT@space{ }%
}{}

%% check shell escape trigger
\IfFileExists{shellesc.sty}{%%is bundled in TL15 or higher release version
\RequirePackage{shellesc}}{%%otherwise, such TL has no luatex.
  \protected\def\ShellEscape{\immediate\write18 }%%compatibility for TL14 or lower version
}
\ifnum\ShellEscapeStatus=1
\else
  \gfxwand@error{Run in shell escape mode for proper operation: --shell-escape}%
\fi

%% converted file's name
\ifgfxwand@localfiles
  \ifgfxwand@imagecache
    % make sure that we have \pdf@mdfivesum, used for the hash of the image's path
    \RequirePackage{pdftexcmds}
  \fi
\fi
\def\@gfxwand@targetfilenoext#1{%
  \ifgfxwand@localfiles
    \ifgfxwand@imagecache
      \jobname.\pdf@mdfivesum{#1}.4gfxwand%
    \else
      \jobname.4gfxwand%
    \fi
  \else
    #1.4gfxwand%
  \fi
}
\def\@gfxwand@targetfile#1{%
  \@gfxwand@targetfilenoext{#1}.pdf%
}
%\def\@gfxwand@targetfile#1{%
%  \ifgfxwand@localfiles
%    \ifgfxwand@imagecache
%      \jobname.\pdf@mdfivesum{#1}.4gfxwand.pdf%
%    \else
%      \jobname.4gfxwand.pdf%
%    \fi
%  \else
%    #1.4gfxwand.pdf%
%  \fi
%}

%% read image file
\let\clone@Gread@pdf\Gread@pdf
\def\Gread@imagetopdf#1{%
  \ifgfxwand@imagecache
    \IfFileExists{\@gfxwand@targetfile{\Gin@base}}{%
      % TODO: invalidate the cached file depending on mtime
      \typeout{including cached image: \@gfxwand@targetfile{\Gin@base}}%
    }{\typeout{not found: \@gfxwand@targetfile{\Gin@base}}%
      \@gfxwand@convert@any@to@pdf}%
  \else
    \@gfxwand@convert@any@to@pdf
  \fi
  %% renamed inside: foo.EXT -> foo.4gfxwand.pdf
  \let\clone@Gin@base\Gin@base
  \def\Gin@base{\@gfxwand@targetfilenoext{\clone@Gin@base}}%
%  \def\Gin@base{\clone@Gin@base.4gfxwand}%
  \def\Gin@ext{.pdf}%
% \typeout{!!! #1}%%=> tigerpsdfmt.4gfxwand.xbb
% \typeout{!!! \Gin@base\Gin@ext}%%=> tigerpsdfmt.4gfxwand.pdf
  \clone@Gread@pdf{#1}}

\def\@gfxwand@convert@any@to@pdf{%
  \typeout{converting: \Gin@base\Gin@ext\GPT@space --(\@gfxwand@converter)--> \@gfxwand@targetfile{\Gin@base}}%
  \if@gfxwand@imgtopdf
    \ShellEscape{img2pdf --output \@gfxwand@targetfile{\Gin@base} --nodate -- \Gin@base\Gin@ext\GPT@space}%
  \else\if@gfxwand@magick
    \ShellEscape{\@gfxwand@converter\GPT@space \Gin@base\Gin@ext\GPT@space\@gfxwand@targetfile{\Gin@base}}%
  \else\if@gfxwand@sips
    \ShellEscape{sips -s format pdf \Gin@base\Gin@ext\GPT@space --out \@gfxwand@targetfile{\Gin@base}}%
  \else
    \gfxwand@error{Converter unspecified}%
  \fi\fi\fi
}
% TODO: see if we can use a single temp file without adding a .4gfxwand.pdf file to the source directories
% TODO: see if we can use cache files in the document's directory with a (sha1, md5, ...) hash of the source files' paths?

% clean up at the very end
\RequirePackage{atveryend}
\RequirePackage{ifplatform}
% remove the local temp file if present
\AtVeryEndDocument{
  \ifgfxwand@localfiles\ifgfxwand@imagecache\else
    \ifwindows
      \ShellEscape{del /f /q \jobname.4gfxwand.pdf}%
    \else
      \ShellEscape{rm -f -- \jobname.4gfxwand.pdf}%
    \fi
  \fi\fi
}

\endinput
% vim: filetype=tex tabstop=2 shiftwidth=2 softtabstop=2 expandtab:
%%
%% End of file `graphicxwand.sty'.
