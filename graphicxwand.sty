% #!rm -f tigerpsdfmt4* && ptex2pdf -l -u -ot '-shell-escape' -od '-v' test-gin-rule-psd
% #!rm -f tigerpsdfmt4* && xelatex -shell-escape test-gin-rule-psd
% #!rm -f tigerpsdfmt4* && pdflatex -shell-escape test-gin-rule-psd
%#!rm -f tigerpsdfmt4* && lualatex -shell-escape test-gin-rule-psd
% #!lualatex -shell-escape test-gin-rule-psd
%%
%% This is file 'graphicxwand.sty'.
%%
%% Based on 'graphicxpsd.sty' v1.2:
%%     https://github.com/munepi/graphicxpsd
%%     Copyright (c) 2017-2023 Munehiro Yamamoto
%%         * e-mail:   munepixyz@gmail.com, munepi@greencherry.jp
%%         * GitHub:   https://github.com/munepi
%%         * Twitter:  @munepixyz
%%
%% Copyright (c) 2025 Loïc CORBASSON <loic.devel@corbasson.fr>
%%
%% This package is licensed under the terms of the MIT License.
%%
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{graphicxwand}
  [2025/07/29 v1.4  Support for (almost) any image format for the graphicx
                    package via various converters
                    (magick/gm/convert, img2pdf, inkscape, sips, vips)]

%% declare package errors
\def\gfxwand@error{\PackageError{graphicxwand}}
\def\gfxwand@warning{\PackageWarning{graphicxwand}}
\def\gfxwand@warningnoline{\PackageWarningNoLine{graphicxwand}}
\def\gfxwand@info{\PackageInfo{graphicxwand}}

%% support keyval options and allow string manipulations
\RequirePackage{kvoptions}
\SetupKeyvalOptions{
  family=gfxwand,
  prefix=gfxwand@,
}
\RequirePackage{xstring}
\newcommand\IfStringInList[2]{\IfSubStr*{,#2,}{,#1,}}

%% support major graphicx drivers
\RequirePackage{iftex}
\newif\if@gfxwand@needsxbb \@gfxwand@needsxbbfalse
\newif\if@gfxwand@likepdftex \@gfxwand@likepdftexfalse
\ifpdf
  \DeclareStringOption[likepdftex]{driver}
  \@gfxwand@needsxbbfalse\@gfxwand@likepdftextrue%
\else
  \DeclareStringOption{driver}
\fi
% alternative interface for driver options
\DeclareVoidOption{dvips}{\gfxwand@SetupDriver}
%\DeclareVoidOption{dvipdfm}{\SetupDriver}
\DeclareVoidOption{dvipdfmx}{\gfxwand@SetupDriver}
\DeclareVoidOption{pdftex}{\gfxwand@SetupDriver}
\DeclareVoidOption{luatex}{\gfxwand@SetupDriver}
\DeclareVoidOption{xetex}{\gfxwand@SetupDriver}
% In \gfxwand@SetupDriver we take the current option \CurrentOption
% and pass it to the driver option.
% The \expandafter commands expand \CurrentOption at the
% time, when \gfxwand@SetupDriver is executed and \CurrentOption
% has the correct meaning.
\newcommand*{\gfxwand@SetupDriver}{%
  \expandafter\gfxwand@@SetupDriver\expandafter{\CurrentOption}%
}
\newcommand*{\gfxwand@@SetupDriver}[1]{%
  \IfStringInList{#1}{dvipdfmx,xetex}{
    \@gfxwand@needsxbbtrue\@gfxwand@likepdftexfalse
  }{\IfStringInList{#1}{luatex,pdftex}{
    \@gfxwand@needsxbbfalse\@gfxwand@likepdftextrue
  }{
    \gfxwand@error{Unknown option ‘#1’}{}%
  }}
  \setkeys{gfxwand}{driver={#1}}%
}

%% converters
\DeclareStringOption[img2pdf]{rasterconverter}[img2pdf]
%% support for raster-image-to-pdf commands:
%% TODO update documentation
%% - img2pdf (uses Pillow, is lossless for raster images),
%% - sips (macOS),
%% - imagemagick/magick/convert (ImageMagick),
%% - graphicsmagick (GraphicsMagick),
%% - vips
\newif\if@gfxwand@raster@imgtopdf \@gfxwand@raster@imgtopdffalse
\newif\if@gfxwand@raster@sips \@gfxwand@raster@sipsfalse
\newif\if@gfxwand@raster@magick \@gfxwand@raster@magickfalse
\newif\if@gfxwand@raster@vips \@gfxwand@raster@vipsfalse
\def\@gfxwand@rasterconverter{img2pdf}%% as default
\newcommand*{\gfxwand@SetupRasterConverter}{%
  \IfStrEq{\gfxwand@rasterconverter}{}{%
    \@gfxwand@raster@imgtopdftrue\gdef\@gfxwand@rasterconverter{img2pdf}
  }{\IfStringInList{\gfxwand@rasterconverter}{img2pdf}{
    \@gfxwand@raster@imgtopdftrue\gdef\@gfxwand@rasterconverter{img2pdf}
  }{\IfStringInList{\gfxwand@rasterconverter}{sips}{
    \@gfxwand@raster@sipstrue\gdef\@gfxwand@rasterconverter{sips}
  }{\IfStringInList{\gfxwand@rasterconverter}{im,imagemagick,magick}{
    \@gfxwand@raster@magicktrue\gdef\@gfxwand@rasterconverter{magick}
  }{\IfStringInList{\gfxwand@rasterconverter}{gm,graphicsmagick,gmconvert}{
    \@gfxwand@raster@magicktrue\gdef\@gfxwand@rasterconverter{gm\GPT@space convert}
  }{\IfStringInList{\gfxwand@rasterconverter}{convert}{
    \@gfxwand@raster@magicktrue\gdef\@gfxwand@rasterconverter{convert}
  }{\IfStringInList{\gfxwand@rasterconverter}{vips}{
    \@gfxwand@raster@vipstrue\gdef\@gfxwand@rasterconverter{vips}
  }{
    \gfxwand@error{Unknown option value ‘\gfxwand@rasterconverter’^^J
      for ‘rasterconverter’}{}%
  }}}}}}}
}
\newcommand*{\DeclareGraphicsRasterConverter}[1]{%
  \setkeys{gfxwand}{rasterconverter={#1}}%
  \gfxwand@SetupRasterConverter%
}

\DeclareStringOption[inkscape]{vectorconverter}[inkscape]
%% support for vector-image-to-pdf commands:
%% TODO update documentation
%% - inkscape (Inkscape, is lossless for vector images),
%% - sips (macOS),
%% - imagemagick/magick/convert (ImageMagick),
%% - graphicsmagick (GraphicsMagick),
\newif\if@gfxwand@vector@inkscape \@gfxwand@vector@inkscapefalse
\newif\if@gfxwand@vector@sips \@gfxwand@vector@sipsfalse
\newif\if@gfxwand@vector@magick \@gfxwand@vector@magickfalse
\def\@gfxwand@vectorconverter{inkscape}%% as default
\newcommand*{\gfxwand@SetupVectorConverter}{%
  \IfStrEq{\gfxwand@vectorconverter}{}{%
    \@gfxwand@vector@inkscapetrue\gdef\@gfxwand@vectorconverter{inkscape}
  }{\IfStringInList{\gfxwand@vectorconverter}{inkscape}{
    \@gfxwand@vector@inkscapetrue\gdef\@gfxwand@vectorconverter{inkscape}
  }{\IfStringInList{\gfxwand@vectorconverter}{soffice-draw}{
    \@gfxwand@vector@inkscapetrue\gdef\@gfxwand@vectorconverter{soffice\GPT@space --draw}
  }{\IfStringInList{\gfxwand@vectorconverter}{sips}{
    \@gfxwand@vector@sipstrue\gdef\@gfxwand@vectorconverter{sips}
  }{\IfStringInList{\gfxwand@vectorconverter}{im,imagemagick,magick}{
    \@gfxwand@vector@magicktrue\gdef\@gfxwand@vectorconverter{magick}
  }{\IfStringInList{\gfxwand@vectorconverter}{gm,graphicsmagick,gmconvert}{
    \@gfxwand@vector@magicktrue\gdef\@gfxwand@vectorconverter{gm\GPT@space convert}
  }{\IfStringInList{\gfxwand@vectorconverter}{convert}{
    \@gfxwand@vector@magicktrue\gdef\@gfxwand@vectorconverter{convert}
  }{
    \gfxwand@error{Unknown option value ‘\gfxwand@vectorconverter’^^J
      for ‘vectorconverter’}{}%
  }}}}}}
}
\newcommand*{\DeclareGraphicsVectorConverter}[1]{%
  \setkeys{gfxwand}{vectorconverter={#1}}%
  \gfxwand@SetupVectorConverter%
}

%% lossless mode
\DeclareBoolOption[true]{lossless}
%% image cache flag
\DeclareBoolOption[true]{imagecache}
%% use only local files, in the document's directory
\DeclareBoolOption[true]{localfiles}

%% set options defaults and process options
\DeclareDefaultOption{\gfxwand@warning{`\CurrentOption' ignored}}% For unknown options
\ProcessKeyvalOptions*{}
\gfxwand@SetupRasterConverter
\gfxwand@SetupVectorConverter

%% support for * (any) extension (imagetopdf)
%% TODO: see why we don't use \DeclareGraphicsRule
%% TODO: add an option to use JP2/JPG (lossy) conversion instead of PDF/PNG
%% TODO: detect whether the file is a raster image or a vector image
\if@gfxwand@needsxbb
  % When including images with dvipdfmx, their bounding boxes should be generated by running extractbb.
  % The result will be in an .xbb file; the xbb information is the same as for the PDF format.
  \@namedef{Gin@rule@*}#1{{imagetopdf}{.xbb}{#1}}
\else\if@gfxwand@likepdftex
  \@namedef{Gin@rule@*}#1{{imagetopdf}{.pdf}{#1}}
\else
  \gfxwand@error{Please choose a specific dviware driver from the following list
    and set it as a documentclass option.^^J
    Available dviware drivers: dvipdfmx, xetex, luatex, pdftex}{}%
\fi\fi

%% then, include the file as converted PDF
\@ifundefined{Ginclude@pdf}{\gfxwand@error{%
  Please load 'graphicxwand' package after loading 'graphicx' package.}}\relax
\let\Ginclude@imagetopdf\Ginclude@pdf
\let\Ginclude@rasterimagetopdf\Ginclude@pdf
\let\Ginclude@vectorimagetopdf\Ginclude@pdf

%% compatibility for TL16 or lower version
\@ifundefined{GPT@space}{%
  \def\GPT@space{ }%
}{}

%% check shell escape trigger
\IfFileExists{shellesc.sty}{%%is bundled in TL15 or higher release version
  \RequirePackage{shellesc}}{%%otherwise, such TL has no luatex.
  \protected\def\ShellEscape{\immediate\write18 }%%compatibility for TL14 or lower version
}
\ifnum\ShellEscapeStatus=1
\else
  \gfxwand@error{Run in shell escape mode for proper operation:^^J
    -shell-escape}{}%
\fi

%% converted file's name
\ifgfxwand@localfiles
  \ifgfxwand@imagecache
    % make sure that we have \pdf@mdfivesum, used for the hash of the image's path,
    % and \pdf@filemoddate, to check if the cache file is still valid
    \RequirePackage{pdftexcmds}
    \RequirePackage{filemod}
  \fi
\fi
\def\@gfxwand@targetfilenoext#1{%
  \ifgfxwand@localfiles
    \ifgfxwand@imagecache
      \jobname.\pdf@mdfivesum{#1}.4gfxwand%
    \else
      \jobname.4gfxwand%
    \fi
  \else
    #1.4gfxwand%
  \fi
}
\def\@gfxwand@lossytargetfile#1{%
  \@gfxwand@targetfilenoext{#1}.jp2%
}
\def\@gfxwand@targetfile#1{%
  \@gfxwand@targetfilenoext{#1}.pdf%
}

%% read image file
\newif\if@@gfxwand@rasterimage
\let\clone@Gread@pdf\Gread@pdf
\def\Gread@imagetopdf#1{%
  \IfStringInList{\Gin@ext}{%
    % See https://en.wikipedia.org/wiki/Image_file_format#Vector_formats
    % and the various converters' supported input formats
    .dhw,%                            ACECAD Digimemo
    .aff,%                            Acorn Draw (RISC OS)
    .amf,%                            Additive manufacturing file format
    .fh1,.fh2,.fh3,.fh4,.fh5,%
    .fh6,.fh7,.fh8,.fh9,.fh10,%
    .fh11,.fhd%                       Adobe FreeHand
    .ai,%                             Adobe Illustrator
    .afdesign,%                       Affinity Designer
    .agd,%                            AgileGraph
    .3ds,%                            AutoDesk 3DS Max
    .dwg,%                            AutoDesk AutoCAD
    .dwf,.dwfx,%                      AutoDesk Design Web Format
    .dxf,%                            AutoDesk Drawing Interchange Format
    .blend,%                          Blender
    .cwd,%                            ClarisWorks Draw
    .dae,%                            COLLADA
    .cgm,%                            Computer Graphics Metafile
    .cdr,.cdt,%                       CorelDRAW
    .ccx,.cmx,%                       CorelDRAW Presentation Exchange
    .dgn,%                            DGN
    .djv,.djvu,%                      DjVu
    .epdf,%                           Encapsulated Portable Document Format
    .eps,.eps2,.eps3,.epsf,.epsi,%    Encapsulated PostScript
    .ept,.ept2,.ept3,%                Encapsulated PostScript with TIFF
    .x3d,.x3db,.x3dbz,.x3dv,.x3dvz,%  Extensible 3D
    .xaml,%                           Extensible Application Markup Language
    .fxg,%                            Flash XML Graphics
    .gb,.gbr,.geb,.gerber,%           Gerber
    .glb,.gltf,%                      glTF (Graphics Library Transmission Format)
    .dot,.gv,%                        Graphviz
    .hvif,%                           Haiku Vector Icon Format
    .hpgl,%                           Hewlett-Packard Graphics Language (HP-GL)
    .ifc,.ifcxml,.ifczip,%            Industry Foundation Classes
    .igs,%                            Initial Graphics Exchange Specification (IGES)
    .jt,%                             Jupiter Tessellation
    .lot,%                            Lottie
    .mvg,%                            Magick Vector Graphics
    .mml,%                            MathML
    .vsd,.vsdm,.vsdx,.vdx%            Microsoft Visio
    .ica,.mca,.mda,.mmr,%             MO:DCA (Mixed Object:Document Content Architecture)
    .fodg,.odg,%                      OpenDocument Graphics
    .flt,%                            OpenFlight
    .ogex,%                           Open Game Engine Exchange (OpenGEX)
    .otf,%                            OpenType font
    .oxps,.xps,%                      Open XML Paper Specification
    .met,%                            OS/2 Metafile
    .pct,.pic,.pict,%                 PICT
    .ply,%                            Polygon File Format
    .pdf,.pocketmod,%                 Portable Document Format
    .ps,.ps2,.ps3,%                   PostScript
    .pfa,.pfb,%                       PostScript Type 1 font
    .pov,%                            POV-Ray
    .prc,%                            Product Representation Compact
    .svg,.svgz,%                      Scalable Vector Graphics
    .skp,%                            SketchUp
    .swf,%                            Small Web Format
    .sxd,%                            StarOffice Draw
    .210,.p21,.step,.stp,.stpnc,%     STEP-file (ISO 10303-21)
    .stl,%                            Stereolithography
    .ttc,.ttf,%                       TrueType font
    .u3d,%                            Universal 3D
    .wrl,.wrz,%                       Virtual Reality Modeling Language (VRML)
    .obj,%                            Wavefront OBJ
    .emf,.emz,.wmf,.wmz,%             Windows Metafile
    .wpg,%                            WordPerfect Graphics
    .x3d,.xar,%                       Xara
    .fig,%                            Xfig
    .zmf,%                            Zoner Callisto
  }{% vector image
    \@@gfxwand@rasterimagefalse%
  }{ % raster image
    \@@gfxwand@rasterimagetrue%
  }
  \IfFileExists{\Gin@base\Gin@ext}{%
    \ifgfxwand@imagecache
      \IfFileExists{\@gfxwand@targetfile{\Gin@base}}{%
        \filemodcmp{\@gfxwand@targetfile{\Gin@base}}{\Gin@base\Gin@ext}{%
          % cache file is newer (or has the same modification datetime)
          \gfxwand@info{including cached image: \@gfxwand@targetfile{\Gin@base}}%
        }{%
          % source image is newer
          \gfxwand@info{cached image has to be regenerated: \@gfxwand@targetfile{\Gin@base}}%
          \@gfxwand@convert@any@to@pdf
        }%
      }{\gfxwand@info{cached image not found: \@gfxwand@targetfile{\Gin@base}}%
        \@gfxwand@convert@any@to@pdf}%
    \else
      \@gfxwand@convert@any@to@pdf
    \fi
    %% renamed inside: foo.EXT -> foo.4gfxwand.pdf
    \let\clone@Gin@base\Gin@base
    \def\Gin@base{\@gfxwand@targetfilenoext{\clone@Gin@base}}%
    \def\Gin@ext{.pdf}%
  }{\gfxwand@warning{source image not found: \Gin@base\Gin@ext}}%
  \clone@Gread@pdf{#1}%
}

\def\@gfxwand@convert@any@to@pdf{%
  \if@@gfxwand@rasterimage
    \ifgfxwand@lossless
      \typeout{converting: \Gin@base\Gin@ext\GPT@space --(\@gfxwand@rasterconverter)--> \@gfxwand@targetfile{\Gin@base}}%
      \if@gfxwand@raster@imgtopdf
        \ShellEscape{img2pdf --output \@gfxwand@targetfile{\Gin@base}\GPT@space --nodate -- \Gin@base\Gin@ext\GPT@space}%
      \else\if@gfxwand@raster@magick
        \ShellEscape{\@gfxwand@rasterconverter\GPT@space \Gin@base\Gin@ext\GPT@space \@gfxwand@targetfile{\Gin@base}\GPT@space}%
      \else\if@gfxwand@raster@sips
        \ShellEscape{sips -s format pdf \Gin@base\Gin@ext\GPT@space --out \@gfxwand@targetfile{\Gin@base}\GPT@space}%
      \else\if@gfxwand@raster@vips
        \ShellEscape{vips copy \Gin@base\Gin@ext\GPT@space \@gfxwand@targetfile{\Gin@base}\GPT@space}%
      \else
        \gfxwand@error{Raster image converter unspecified}%
      \fi\fi\fi\fi
    \else % lossy mode
      \typeout{converting: \Gin@base\Gin@ext\GPT@space --(\@gfxwand@rasterconverter)--> \@gfxwand@lossytargetfile{\Gin@base}}%
      \if@gfxwand@raster@magick
        \ShellEscape{\@gfxwand@rasterconverter\GPT@space \Gin@base\Gin@ext\GPT@space \@gfxwand@lossytargetfile{\Gin@base}\GPT@space}%
      \else\if@gfxwand@raster@sips
        \ShellEscape{sips -s format pdf \Gin@base\Gin@ext\GPT@space --out \@gfxwand@lossytargetfile{\Gin@base}\GPT@space}%
      \else\if@gfxwand@raster@vips
        \ShellEscape{vips copy \Gin@base\Gin@ext\GPT@space \@gfxwand@lossytargetfile{\Gin@base}\GPT@space}%
      \else
        \gfxwand@error{Raster image converter unspecified}%
      \fi\fi\fi
      \typeout{converting: \@gfxwand@raster@lossytargetfile{\Gin@base} --(img2pdf)--> \@gfxwand@targetfile{\Gin@base}}%
      \ShellEscape{img2pdf --output \@gfxwand@targetfile{\Gin@base}\GPT@space --nodate -- \@gfxwand@raster@lossytargetfile{\Gin@base}\GPT@space}%
    \fi
  \else % vector image
    \typeout{converting: \Gin@base\Gin@ext\GPT@space --(\@gfxwand@vectorconverter)--> \@gfxwand@targetfile{\Gin@base}}%
    \if@gfxwand@vector@inkscape
      \ShellEscape{inkscape --export-type=pdf --export-filename=\@gfxwand@targetfile{\Gin@base}\GPT@space \Gin@base\Gin@ext\GPT@space}%
    \else\if@gfxwand@vector@sofficedraw
      \ifwindows
        \ShellEscape{copy \Gin@base\Gin@ext\GPT@space \@gfxwand@targetfile{\Gin@base}\Gin@ext\GPT@space}%
      \else
        \ShellEscape{cp \Gin@base\Gin@ext\GPT@space \@gfxwand@targetfile{\Gin@base}\Gin@ext\GPT@space}%
      \fi
      \ShellEscape{soffice --headless --convert-to pdf:draw\_pdf\_Export \@gfxwand@targetfile{\Gin@base}\Gin@ext\GPT@space}%
      \ifwindows
        \ShellEscape{del /f /q \@gfxwand@targetfile{\Gin@base}\Gin@ext\GPT@space}%
        \ShellEscape{move \@gfxwand@targetfile{\Gin@base}.pdf\GPT@space \@gfxwand@targetfile{\Gin@base}\GPT@space}%
      \else
        \ShellEscape{rm -f -- \@gfxwand@targetfile{\Gin@base}\Gin@ext\GPT@space}%
        \ShellEscape{mv -- \@gfxwand@targetfile{\Gin@base}.pdf\GPT@space \@gfxwand@targetfile{\Gin@base}\GPT@space}%
      \fi
    \else\if@gfxwand@vector@magick
      \ShellEscape{\@gfxwand@vectorconverter\GPT@space \Gin@base\Gin@ext\GPT@space \@gfxwand@targetfile{\Gin@base}\GPT@space}%
    \else\if@gfxwand@vector@sips
      \ShellEscape{sips -s format pdf \Gin@base\Gin@ext\GPT@space --out \@gfxwand@targetfile{\Gin@base}\GPT@space}%
    \else
      \gfxwand@error{Vector image converter unspecified}%
    \fi\fi\fi\fi
  \fi
}

%% clean up at the very end
\RequirePackage{atveryend}
\RequirePackage{ifplatform}
%% remove the local temp file if present
\AtVeryEndDocument{
  \ifgfxwand@localfiles\ifgfxwand@imagecache\else
    \ifwindows
      \ifgfxwand@lossless\else
        \ShellEscape{del /f /q \jobname.4gfxwand.jp2}%
      \fi
      \ShellEscape{del /f /q \jobname.4gfxwand.pdf}%
    \else
      \ifgfxwand@lossless\else
        \ShellEscape{rm -f -- \jobname.4gfxwand.jp2}%
      \fi
      \ShellEscape{rm -f -- \jobname.4gfxwand.pdf}%
    \fi
  \fi\fi
}

\endinput
% vim: filetype=tex tabstop=2 shiftwidth=2 softtabstop=2 expandtab:
%%
%% End of file `graphicxwand.sty'.
