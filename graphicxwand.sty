% #!rm -f tigerpsdfmt4* && ptex2pdf -l -u -ot '-shell-escape' -od '-v' test-gin-rule-psd
% #!rm -f tigerpsdfmt4* && xelatex -shell-escape test-gin-rule-psd
% #!rm -f tigerpsdfmt4* && pdflatex -shell-escape test-gin-rule-psd
%#!rm -f tigerpsdfmt4* && lualatex -shell-escape test-gin-rule-psd
% #!lualatex -shell-escape test-gin-rule-psd
%%
%% This is file 'graphicxwand.sty'.
%%
%% Based on 'graphicxpsd.sty' v1.2:
%%     https://github.com/munepi/graphicxpsd
%%     Copyright (c) 2017-2023 Munehiro Yamamoto
%%         * e-mail:   munepixyz@gmail.com, munepi@greencherry.jp
%%         * GitHub:   https://github.com/munepi
%%         * Twitter:  @munepixyz
%%
%% Copyright (c) 2025 Lo√Øc CORBASSON <loic.devel@corbasson.fr>
%%
%% This package is licensed under the terms of the MIT License.
%%
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{graphicxwand}
  [2025/07/29 v1.3  Support for (almost) any image format for the graphicx
                    package via various converters
                    (img2pdf, convert, magick, gm, sips)]

%% declare package errors
\def\gfxwand@error{\PackageError{graphicxwand}}
\def\gfxwand@warning{\PackageWarning{graphicxwand}}
\def\gfxwand@warningnoline{\PackageWarningNoLine{graphicxwand}}
\def\gfxwand@info{\PackageInfo{graphicxwand}}

%% support major graphicx drivers
\newif\if@gfxwand@dvipdfmx \@gfxwand@dvipdfmxfalse
\newif\if@gfxwand@pdftex \@gfxwand@pdftexfalse
\DeclareOption{dvipdfmx}{\@gfxwand@dvipdfmxtrue\@gfxwand@pdftexfalse}
\DeclareOption{xetex}{\@gfxwand@dvipdfmxtrue\@gfxwand@pdftexfalse}
\DeclareOption{luatex}{\@gfxwand@dvipdfmxfalse\@gfxwand@pdftextrue}
\DeclareOption{pdftex}{\@gfxwand@dvipdfmxfalse\@gfxwand@pdftextrue}

%% support for image-to-pdf commands:
%% TODO move back to Magick as default
%% TODO update documentation
%% TODO check \DeclareGraphicsRule to see if we can make the code shorter
%% img2pdf (uses Pillow),
%% imagemagick/magick/convert (ImageMagick),
%% graphicsmagick (GraphicsMagick),
%% sips (macOS)
\newif\if@gfxwand@imgtopdf \@gfxwand@imgtopdffalse
\newif\if@gfxwand@magick \@gfxwand@magickfalse
%\newif\if@gfxwand@vips \@gfxwand@vipsfalse
\newif\if@gfxwand@sips \@gfxwand@sipsfalse
\def\@gfxwand@converter{convert}%% as default
\DeclareOption{img2pdf}{%
  \@gfxwand@imgtopdftrue\gdef\@gfxwand@converter{img2pdf}}
\DeclareOption{imagemagick}{%
  \@gfxwand@magicktrue\gdef\@gfxwand@converter{magick}}
\DeclareOption{magick}{%
  \@gfxwand@magicktrue\gdef\@gfxwand@converter{magick}}
\DeclareOption{graphicsmagick}{%
  \@gfxwand@magicktrue\gdef\@gfxwand@converter{gm\GPT@space convert}}
\DeclareOption{convert}{%
  \@gfxwand@magicktrue\gdef\@gfxwand@converter{convert}}
%\DeclareOption{vips}{%  %% TODO see if a vips+pdf or vips option is quicker than img2pdf
%  \@gfxwand@vipstrue\gdef\@gfxwand@converter{vips}}
\DeclareOption{sips}{%
  \@gfxwand@sipstrue\gdef\@gfxwand@converter{sips}}

%% image cache flag
\newif\if@gfxwand@imagecache \@gfxwand@imagecachefalse
\DeclareOption{cache=true}{\@gfxwand@imagecachetrue}
\DeclareOption{cache=True}{\@gfxwand@imagecachetrue}
\DeclareOption{cache=false}{\@gfxwand@imagecachefalse}
\DeclareOption{cache=False}{\@gfxwand@imagecachefalse}

\ProcessOptions\relax

%% support for * (any) extension (imagetopdf)
%% TODO: see why we don't use \DeclareGraphicsRule
%% TODO: add an option to use JP2/JPG (lossy) conversion instead of PDF/PNG
\if@gfxwand@dvipdfmx
  \@namedef{Gin@rule@*}#1{{imagetopdf}{.xbb}{#1}}
\else\if@gfxwand@pdftex
  \@namedef{Gin@rule@*}#1{{imagetopdf}{.pdf}{#1}}
\else
  \gfxwand@error{Please choice specific dviware driver from the following list
    and set the one as a documentclass option.^^J
    available dviware drivers: dvipdfmx, xetex, luatex, pdftex}%
\fi\fi

%% then, include the file as converted PDF
\@ifundefined{Ginclude@pdf}{\gfxwand@error{%
  Please load 'graphicxwand' package after loading 'graphicx' package.}}\relax
\let\Ginclude@imagetopdf\Ginclude@pdf

%% compatibility for TL16 or lower version
\@ifundefined{GPT@space}{%
  \def\GPT@space{ }%
}{}

%% check shell escape trigger
\IfFileExists{shellesc.sty}{%%is bundled in TL15 or higher release version
\RequirePackage{shellesc}}{%%otherwise, such TL has no luatex.
  \protected\def\ShellEscape{\immediate\write18 }%%compatibility for TL14 or lower version
}

%% read image file
\let\clone@Gread@pdf\Gread@pdf
\def\Gread@imagetopdf#1{%
  \if@gfxwand@imagecache
    \IfFileExists{\Gin@base.4gfxwand.pdf}{%
      \typeout{including cached image: \Gin@base.4gfxwand.pdf}%
    }{\typeout{not found: \Gin@base.4gfxwand.pdf}%
      \@gfxwand@convert@any@to@pdf}%
  \else
    \@gfxwand@convert@any@to@pdf
  \fi
  %% renamed inside: foo.EXT -> foo.4gfxwand.pdf
  \let\clone@Gin@base\Gin@base
  \def\Gin@base{\clone@Gin@base.4gfxwand}%
  \def\Gin@ext{.pdf}%
% \typeout{!!! #1}%%=> tigerpsdfmt.4gfxwand.xbb
% \typeout{!!! \Gin@base\Gin@ext}%%=> tigerpsdfmt.4gfxwand.pdf
  \clone@Gread@pdf{#1}}

\def\@gfxwand@convert@any@to@pdf{%
  \typeout{converting: \Gin@base\Gin@ext\GPT@space -> \Gin@base.4gfxwand.pdf}%
  \if@gfxwand@imgtopdf
    \ShellEscape{img2pdf --output \Gin@base.4gfxwand.pdf --nodate -- \Gin@base\Gin@ext\GPT@space}%
  \else
    \if@gfxwand@magick
      \ShellEscape{\@gfxwand@converter\GPT@space -- \Gin@base\Gin@ext\GPT@space\Gin@base.4gfxwand.pdf}%
    \else
      \if@gfxwand@sips
        \ShellEscape{sips -s format pdf \Gin@base\Gin@ext\GPT@space --out \Gin@base.4gfxwand.pdf}%
      \else
        \gfxwand@error{Converter unspecified}%
      \fi
    \fi
  \fi
}
% TODO: see if we can use a single temp file without adding a .4gfxwand.pdf file to the source directories
% TODO: see if we can use cache files in the document's directory with a (sha1, md5, ...) hash of the source files' paths?

\endinput
% vim: filetype=tex tabstop=2 shiftwidth=2 softtabstop=2 expandtab:
%%
%% End of file `graphicxwand.sty'.
