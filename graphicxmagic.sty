% #!rm -f tigerpsdfmt4* && ptex2pdf -l -u -ot '-shell-escape' -od '-v' test-gin-rule-psd
% #!rm -f tigerpsdfmt4* && xelatex -shell-escape test-gin-rule-psd
% #!rm -f tigerpsdfmt4* && pdflatex -shell-escape test-gin-rule-psd
%#!rm -f tigerpsdfmt4* && lualatex -shell-escape test-gin-rule-psd
% #!lualatex -shell-escape test-gin-rule-psd
%%
%% This is file 'graphicxmagic.sty'.
%%
%% Based on 'graphicxpsd.sty' v1.2:
%%     https://github.com/munepi/graphicxpsd
%%     Copyright (c) 2017-2023 Munehiro Yamamoto
%%         * e-mail:   munepixyz@gmail.com, munepi@greencherry.jp
%%         * GitHub:   https://github.com/munepi
%%         * Twitter:  @munepixyz
%%
%% Copyright (c) 2025 Lo√Øc CORBASSON <loic.devel@corbasson.fr>
%%
%% This package is licensed under the terms of the MIT License.
%%
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{graphicxmagic}
  [2025/07/29 v1.3  Support for (almost) any image format for the graphicx
                    package via various converters
                    (img2pdf, convert, magick, gm, sips)]

%% declare package errors
\def\gfxmagic@error{\PackageError{graphicxmagic}}
\def\gfxmagic@warning{\PackageWarning{graphicxmagic}}
\def\gfxmagic@warningnoline{\PackageWarningNoLine{graphicxmagic}}
\def\gfxmagic@info{\PackageInfo{graphicxmagic}}

%% support major graphicx drivers
\newif\if@gfxmagic@dvipdfmx \@gfxmagic@dvipdfmxfalse
\newif\if@gfxmagic@pdftex \@gfxmagic@pdftexfalse
\DeclareOption{dvipdfmx}{\@gfxmagic@dvipdfmxtrue\@gfxmagic@pdftexfalse}
\DeclareOption{xetex}{\@gfxmagic@dvipdfmxtrue\@gfxmagic@pdftexfalse}
\DeclareOption{luatex}{\@gfxmagic@dvipdfmxfalse\@gfxmagic@pdftextrue}
\DeclareOption{pdftex}{\@gfxmagic@dvipdfmxfalse\@gfxmagic@pdftextrue}

%% support for image-to-pdf commands:
%% img2pdf (uses Pillow),
%% imagemagick/magick/convert (ImageMagick),
%% graphicsmagick (GraphicsMagick),
%% sips (macOS)
%% TODO:
%% - add img2pdf as the default with --nodate to make it deterministic
\newif\if@gfxmagic@imgtopdf \@gfxmagic@imgtopdffalse
\newif\if@gfxmagic@magick \@gfxmagic@magickfalse
%\newif\if@gfxmagic@vips \@gfxmagic@vipsfalse
\newif\if@gfxmagic@sips \@gfxmagic@sipsfalse
\def\@gfxmagic@imagetopdf{img2pdf}%% as default
\DeclareOption{img2pdf}{%
  \@gfxmagic@imgtopdftrue\gdef\@gfxmagic@imagetopdf{img2pdf}}
\DeclareOption{imagemagick}{%
  \@gfxmagic@magicktrue\gdef\@gfxmagic@imagetopdf{magick}}
\DeclareOption{magick}{%
  \@gfxmagic@magicktrue\gdef\@gfxmagic@imagetopdf{magick}}
\DeclareOption{graphicsmagick}{%
  \@gfxmagic@magicktrue\gdef\@gfxmagic@imagetopdf{gm\GPT@space convert}}
\DeclareOption{convert}{%
  \@gfxmagic@magicktrue\gdef\@gfxmagic@imagetopdf{convert}}
%\DeclareOption{vips}{%  %% TODO see if a vips+pdf or vips option is quicker than img2pdf
%  \@gfxmagic@vipstrue\gdef\@gfxmagic@imagetopdf{vips}}
\DeclareOption{sips}{%
  \@gfxmagic@sipstrue\gdef\@gfxmagic@imagetopdf{sips}}

%% image cache flag
\newif\if@gfxmagic@imagecache \@gfxmagic@imagecachefalse
\DeclareOption{cache=true}{\@gfxmagic@imagecachetrue}
\DeclareOption{cache=True}{\@gfxmagic@imagecachetrue}
\DeclareOption{cache=false}{\@gfxmagic@imagecachefalse}
\DeclareOption{cache=False}{\@gfxmagic@imagecachefalse}

\ProcessOptions\relax

%% support for * (any) extension (imagetopdf)
\if@gfxmagic@dvipdfmx
  \@namedef{Gin@rule@.HEIC}#1{{imagetopdf}{.xbb}{#1}}
  \@namedef{Gin@rule@.heic}#1{{imagetopdf}{.xbb}{#1}}
  \@namedef{Gin@rule@.PSD}#1{{imagetopdf}{.xbb}{#1}}
  \@namedef{Gin@rule@.psd}#1{{imagetopdf}{.xbb}{#1}}
  \@namedef{Gin@rule@.*}#1{{imagetopdf}{.xbb}{#1}}
\else\if@gfxmagic@pdftex
  \@namedef{Gin@rule@.HEIC}#1{{imagetopdf}{.pdf}{#1}}
  \@namedef{Gin@rule@.heic}#1{{imagetopdf}{.pdf}{#1}}
  \@namedef{Gin@rule@.PSD}#1{{imagetopdf}{.pdf}{#1}}
  \@namedef{Gin@rule@.psd}#1{{imagetopdf}{.pdf}{#1}}
  \@namedef{Gin@rule@.*}#1{{imagetopdf}{.pdf}{#1}}
\else
  \gfxmagic@error{Please choice specific dviware driver from the following list
    and set the one as a documentclass option.^^J
    available dviware drivers: dvipdfmx, xetex, luatex, pdftex}%
\fi\fi

%% then, include the file as converted PDF
\@ifundefined{Ginclude@pdf}{\gfxmagic@error{%
  Please load 'graphicxmagic' package after loading 'graphicx' package.}}\relax
\let\Ginclude@imagetopdf\Ginclude@pdf

%% compatibility for TL16 or lower version
\@ifundefined{GPT@space}{%
  \def\GPT@space{ }%
}{}

%% check shell escape trigger
\IfFileExists{shellesc.sty}{%%is bundled in TL15 or higher release version
\RequirePackage{shellesc}}{%%otherwise, such TL has no luatex.
  \protected\def\ShellEscape{\immediate\write18 }%%compatibility for TL14 or lower version
}

%% read image file
\let\clone@Gread@pdf\Gread@pdf
\def\Gread@imagetopdf#1{%
  \if@gfxmagic@imagecache
    \IfFileExists{\Gin@base4gfxmagic.pdf}{%
      \typeout{including cached image: \Gin@base4gfxmagic.pdf}%
    }{\typeout{not found: \Gin@base4gfxmagic.pdf}%
      \@gfxmagic@convert@any@to@pdf}%
  \else
    \@gfxmagic@convert@any@to@pdf
  \fi
  %% renamed inside: foo.EXT -> foo4gfxmagic.pdf
  \let\clone@Gin@base\Gin@base
  \def\Gin@base{\clone@Gin@base4gfxmagic}%
  \def\Gin@ext{.pdf}%
% \typeout{!!! #1}%%=> tigerpsdfmt4gfxmagic.xbb
% \typeout{!!! \Gin@base\Gin@ext}%%=> tigerpsdfmt4gfxmagic.pdf
  \clone@Gread@pdf{#1}}

\def\@gfxmagic@convert@any@to@pdf{%
  \typeout{converting: \Gin@base\Gin@ext\GPT@space -> \Gin@base4gfxmagic.pdf}%
  \if@gfxmagic@imgtopdf
    \ShellEscape{img2pdf --output \Gin@base4gfxmagic.pdf --nodate \Gin@base\Gin@ext\GPT@space}%
  \else
    \if@gfxmagic@magick
      \ShellEscape{\@gfxmagic@imagetopdf\GPT@space\Gin@base\Gin@ext\GPT@space\Gin@base4gfxmagic.pdf}%
    \else
      \if@gfxmagic@sips
        \ShellEscape{sips -s format pdf \Gin@base\Gin@ext\GPT@space --out \Gin@base4gfxmagic.pdf}%
      \else
        \gfxmagic@error{Converter unspecified}%
      \fi
    \fi
  \fi
}

\endinput
% vim: filetype=tex tabstop=2 shiftwidth=2 softtabstop=2 expandtab:
%%
%% End of file `graphicxmagic.sty'.
